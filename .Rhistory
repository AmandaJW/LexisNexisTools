file.rename(files[i], file.name) #rename
}
}
cat("\r\t...renaming files", scales::percent(i/length(files)), "\t\t")
#1. renamed #, 2. not renamed (does already exist), 3. not renamed (no search term or time range found)
}
cat("\n", length(which(renamed$status == 2)), "files renamed")
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 0)), ", not renamed (file already exists)")}
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 1)), ", not renamed (no search term or time range found)")}
cat(" in", format((Sys.time()-start.time), digits = 2, nsmall = 2))
if(report){renamed}
}
x <- rename_LNfiles("F:/Dropbox/Alex oOo Johannes/Database 2001 - Copy/", recursive = TRUE, report = TRUE)
View(x)
x <- "F:/Dropbox/Alex oOo Johannes/Database 2001 - Copy/"
encoding = "UTF-8"
recursive = FALSE
report = FALSE
verbose = TRUE
recursive = TRUE
if(verbose){start.time <- Sys.time(); cat("Checking LN files...\n")}
if(all(grepl(".txt$", x, ignore.case = TRUE))){files <- x}#all instances of x are txt files
if(all(grepl("/$", x, ignore.case = TRUE))){# x is a path
files <- list.files(path = x,
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive)
}
if(mean(grepl(".txt$", x, ignore.case = TRUE)) > 0 &
mean(grepl("/$", x, ignore.case = TRUE)) > 0){ # some txt files but also at least one path
files <- x[grepl(".txt$", x, ignore.case = TRUE)]
files <- c(files,
list.files(path = x[!grepl(".txt$", x, ignore.case = TRUE)],
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive))
}
files <- unique(files) # remove duplicated file names
if(verbose){start.time <- Sys.time(); cat(length(files),"files found to process...\n")}
i<-1
content.v <- stringi::stri_read_lines(files[i], encoding = encoding)
range.v <- content.v[grep("^Download Request:|Ausgabeauftrag: Dokument(e):", content.v)]
range.v <- stringi::stri_extract_all_regex(range.v, pattern = "[[:digit:]]|-", simplify = TRUE)
range.v <- stringi::stri_join(range.v, sep = "", collapse = "")
term.v <- content.v[grep("^Terms: |^Begriffe: ", content.v)]
term.v <- gsub("^Terms: |^Begriffe: ", "", term.v)
term.v <- unlist(strsplit(term.v, split = " and | OR ", fixed = FALSE)) #splits term into elemets seprated by and or OR
date.v <- gsub("[^[:digit:]]", "", term.v[1]) # create from start date with everything but numbers (first element is start date)
date.v <- paste0(date.v, "-", gsub("[^[:digit:]]", "", term.v[2]))
term.v <-  gsub("[^[:alpha:]]", "",term.v[3]) #extract first search term
file.name <- paste0(term.v, "_", date.v, "_",range.v,".txt")
if(!exists("renamed")){renamed = data.frame(name.orig = files,
name.new = character(length = length(files)),
status = character(length = length(files)),
stringsAsFactors = FALSE)}
file.exists(file.name)
file.name
files[i]
gsub("/.$","",files[i])
gsub("/*$","",files[i], perl=TRUE)
file.name <- gsub("/(.*?)$","",files[i])
file.name <- sub("/(.*?)$","",files[i])
file.name <- sub("/[^/]+$","",files[i])
file.name
file.name <- sub("[^/]+$","",files[i])
file.name
file.name <- paste0(file.name, term.v, "_", date.v, "_",range.v,".txt")
file.name
range.v <- content.v[grep("^Download Request:|Ausgabeauftrag: Dokument(e):", content.v)]
content.v
range.v <- content.v[grep("^Download Request:|Ausgabeauftrag: Dokument(e)", content.v)]
range.v <- content.v[grep("^Download Request:|^Ausgabeauftrag: Dokument(e)", content.v)]
range.v <- content.v[grep("Download Request:|Ausgabeauftrag: Dokument(e)", content.v)]
grep("Download Request:|Ausgabeauftrag: Dokument(e)", content.v)
head(content.v)
range.v <- content.v[grep("Download Request:|Ausgabeauftrag: Dokument", content.v)]
range.v <- content.v[grep("^Download Request:|^Ausgabeauftrag: Dokument", content.v)]
# extract the actual range infromation from line
range.v <- stringi::stri_extract_all_regex(range.v, pattern = "[[:digit:]]|-", simplify = TRUE)
range.v <- stringi::stri_join(range.v, sep = "", collapse = "")
# look for search term
term.v <- content.v[grep("^Terms: |^Begriffe: ", content.v)]
#erase everything in the line exept the actual range
term.v <- gsub("^Terms: |^Begriffe: ", "", term.v)
term.v <- unlist(strsplit(term.v, split = " and | OR ", fixed = FALSE)) #splits term into elemets seprated by and or OR
date.v <- gsub("[^[:digit:]]", "", term.v[1]) # create from start date with everything but numbers (first element is start date)
date.v <- paste0(date.v, "-", gsub("[^[:digit:]]", "", term.v[2]))
term.v <-  gsub("[^[:alpha:]]", "",term.v[3]) #extract first search term
file.name <- sub("[^/]+$","",files[i]) #take old filepath
file.name <- paste0(file.name, term.v, "_", date.v, "_",range.v,".txt")
file.name
rename_LNfiles <- function(x, encoding = "UTF-8", recursive = TRUE, report = FALSE, verbose = TRUE){
###' Track the time
if(verbose){start.time <- Sys.time(); cat("Checking LN files...\n")}
if(all(grepl(".txt$", x, ignore.case = TRUE))){files <- x}#all instances of x are txt files
if(all(grepl("/$", x, ignore.case = TRUE))){# x is a path
files <- list.files(path = x,
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive)
}
if(mean(grepl(".txt$", x, ignore.case = TRUE)) > 0 &
mean(grepl("/$", x, ignore.case = TRUE)) > 0){ # some txt files but also at least one path
files <- x[grepl(".txt$", x, ignore.case = TRUE)]
files <- c(files,
list.files(path = x[!grepl(".txt$", x, ignore.case = TRUE)],
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive))
}
files <- unique(files) # remove duplicated file names
if(verbose){start.time <- Sys.time(); cat(length(files),"files found to process...\n")}
# start renaming files
for(i in 1:length(files)){
#read in the articles
content.v <- stringi::stri_read_lines(files[i], encoding = encoding)
#look for the range of articles
range.v <- content.v[grep("^Download Request:|^Ausgabeauftrag: Dokument", content.v)]
# extract the actual range infromation from line
range.v <- stringi::stri_extract_all_regex(range.v, pattern = "[[:digit:]]|-", simplify = TRUE)
range.v <- stringi::stri_join(range.v, sep = "", collapse = "")
# look for search term
term.v <- content.v[grep("^Terms: |^Begriffe: ", content.v)]
#erase everything in the line exept the actual range
term.v <- gsub("^Terms: |^Begriffe: ", "", term.v)
term.v <- unlist(strsplit(term.v, split = " and | OR ", fixed = FALSE)) #splits term into elemets seprated by and or OR
date.v <- gsub("[^[:digit:]]", "", term.v[1]) # create from start date with everything but numbers (first element is start date)
date.v <- paste0(date.v, "-", gsub("[^[:digit:]]", "", term.v[2]))
term.v <-  gsub("[^[:alpha:]]", "",term.v[3]) #extract first search term
file.name <- sub("[^/]+$","",files[i]) #take old filepath
file.name <- paste0(file.name, term.v, "_", date.v, "_",range.v,".txt")
if(!exists("renamed")){renamed = data.frame(name.orig = files,
name.new = character(length = length(files)),
status = character(length = length(files)),
stringsAsFactors = FALSE)}
#rename file
if(file.exists(file.name)){ #file already exists
renamed$name.new[i] <- renamed$name.orig[i]
renamed$status[i] <- 0
}else{
if(file.name=="__.txt"){ #file name is empty
renamed$name.new[i] <- file.name
renamed$status[i] <- 1
}else{
renamed$name.new[i] <- file.name
renamed$status[i] <- 2
file.rename(files[i], file.name) #rename
}
}
cat("\r\t...renaming files", scales::percent(i/length(files)), "\t\t")
#1. renamed #, 2. not renamed (does already exist), 3. not renamed (no search term or time range found)
}
cat("\n", length(which(renamed$status == 2)), "files renamed, ")
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 0)), " not renamed (file already exists)")}
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 1)), " not renamed (no search term or time range found)")}
cat(" in", format((Sys.time()-start.time), digits = 2, nsmall = 2))
if(report){renamed}
}
x <- rename_LNfiles("F:/Dropbox/Alex oOo Johannes/Database 2001 - Copy/", recursive = TRUE, report = TRUE)
View(x)
x$status[x$status==0] <- "not renamed"
rename_LNfiles <- function(x, encoding = "UTF-8", recursive = TRUE, report = FALSE, verbose = TRUE){
###' Track the time
if(verbose){start.time <- Sys.time(); cat("Checking LN files...\n")}
if(all(grepl(".txt$", x, ignore.case = TRUE))){files <- x}#all instances of x are txt files
if(all(grepl("/$", x, ignore.case = TRUE))){# x is a path
files <- list.files(path = x,
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive)
}
if(mean(grepl(".txt$", x, ignore.case = TRUE)) > 0 &
mean(grepl("/$", x, ignore.case = TRUE)) > 0){ # some txt files but also at least one path
files <- x[grepl(".txt$", x, ignore.case = TRUE)]
files <- c(files,
list.files(path = x[!grepl(".txt$", x, ignore.case = TRUE)],
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive))
}
files <- unique(files) # remove duplicated file names
if(verbose){start.time <- Sys.time(); cat(length(files),"files found to process...\n")}
# start renaming files
for(i in 1:length(files)){
#read in the articles
content.v <- stringi::stri_read_lines(files[i], encoding = encoding)
#look for the range of articles
range.v <- content.v[grep("^Download Request:|^Ausgabeauftrag: Dokument", content.v)]
# extract the actual range infromation from line
range.v <- stringi::stri_extract_all_regex(range.v, pattern = "[[:digit:]]|-", simplify = TRUE)
range.v <- stringi::stri_join(range.v, sep = "", collapse = "")
# look for search term
term.v <- content.v[grep("^Terms: |^Begriffe: ", content.v)]
#erase everything in the line exept the actual range
term.v <- gsub("^Terms: |^Begriffe: ", "", term.v)
term.v <- unlist(strsplit(term.v, split = " and | OR ", fixed = FALSE)) #splits term into elemets seprated by and or OR
date.v <- gsub("[^[:digit:]]", "", term.v[1]) # create from start date with everything but numbers (first element is start date)
date.v <- paste0(date.v, "-", gsub("[^[:digit:]]", "", term.v[2]))
term.v <-  gsub("[^[:alpha:]]", "",term.v[3]) #extract first search term
file.name <- sub("[^/]+$","",files[i]) #take old filepath
file.name <- paste0(file.name, term.v, "_", date.v, "_",range.v,".txt")
if(!exists("renamed")){renamed = data.frame(name.orig = files,
name.new = character(length = length(files)),
status = character(length = length(files)),
stringsAsFactors = FALSE)}
#rename file
if(file.exists(file.name)){ #file already exists
renamed$name.new[i] <- renamed$name.orig[i]
renamed$status[i] <- 0
}else{
if(file.name=="__.txt"){ #file name is empty
renamed$name.new[i] <- file.name
renamed$status[i] <- 1
}else{
renamed$name.new[i] <- file.name
renamed$status[i] <- 2
file.rename(files[i], file.name) #rename
}
}
cat("\r\t...renaming files", scales::percent(i/length(files)), "\t\t")
#1. renamed #, 2. not renamed (does already exist), 3. not renamed (no search term or time range found)
}
cat("\n", length(which(renamed$status == 2)), "files renamed, ")
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 0)), " not renamed (file already exists)")}
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 1)), " not renamed (no search term or time range found)")}
cat(" in", format((Sys.time()-start.time), digits = 2, nsmall = 2))
if(report){
renamed$$status[x$status==0] <- "not renamed"
renamed$$status[x$status==1] <- "not renamed"
renamed$$status[x$status==2] <- "renamed"
renamed}
}
rename_LNfiles <- function(x, encoding = "UTF-8", recursive = TRUE, report = FALSE, verbose = TRUE){
###' Track the time
if(verbose){start.time <- Sys.time(); cat("Checking LN files...\n")}
if(all(grepl(".txt$", x, ignore.case = TRUE))){files <- x}#all instances of x are txt files
if(all(grepl("/$", x, ignore.case = TRUE))){# x is a path
files <- list.files(path = x,
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive)
}
if(mean(grepl(".txt$", x, ignore.case = TRUE)) > 0 &
mean(grepl("/$", x, ignore.case = TRUE)) > 0){ # some txt files but also at least one path
files <- x[grepl(".txt$", x, ignore.case = TRUE)]
files <- c(files,
list.files(path = x[!grepl(".txt$", x, ignore.case = TRUE)],
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive))
}
files <- unique(files) # remove duplicated file names
if(verbose){start.time <- Sys.time(); cat(length(files),"files found to process...\n")}
# start renaming files
for(i in 1:length(files)){
#read in the articles
content.v <- stringi::stri_read_lines(files[i], encoding = encoding)
#look for the range of articles
range.v <- content.v[grep("^Download Request:|^Ausgabeauftrag: Dokument", content.v)]
# extract the actual range infromation from line
range.v <- stringi::stri_extract_all_regex(range.v, pattern = "[[:digit:]]|-", simplify = TRUE)
range.v <- stringi::stri_join(range.v, sep = "", collapse = "")
# look for search term
term.v <- content.v[grep("^Terms: |^Begriffe: ", content.v)]
#erase everything in the line exept the actual range
term.v <- gsub("^Terms: |^Begriffe: ", "", term.v)
term.v <- unlist(strsplit(term.v, split = " and | OR ", fixed = FALSE)) #splits term into elemets seprated by and or OR
date.v <- gsub("[^[:digit:]]", "", term.v[1]) # create from start date with everything but numbers (first element is start date)
date.v <- paste0(date.v, "-", gsub("[^[:digit:]]", "", term.v[2]))
term.v <-  gsub("[^[:alpha:]]", "",term.v[3]) #extract first search term
file.name <- sub("[^/]+$","",files[i]) #take old filepath
file.name <- paste0(file.name, term.v, "_", date.v, "_",range.v,".txt")
if(!exists("renamed")){renamed = data.frame(name.orig = files,
name.new = character(length = length(files)),
status = character(length = length(files)),
stringsAsFactors = FALSE)}
#rename file
if(file.exists(file.name)){ #file already exists
renamed$name.new[i] <- renamed$name.orig[i]
renamed$status[i] <- 0
}else{
if(file.name=="__.txt"){ #file name is empty
renamed$name.new[i] <- file.name
renamed$status[i] <- 1
}else{
renamed$name.new[i] <- file.name
renamed$status[i] <- 2
file.rename(files[i], file.name) #rename
}
}
cat("\r\t...renaming files", scales::percent(i/length(files)), "\t\t")
#1. renamed #, 2. not renamed (does already exist), 3. not renamed (no search term or time range found)
}
cat("\n", length(which(renamed$status == 2)), "files renamed, ")
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 0)), " not renamed (file already exists)")}
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 1)), " not renamed (no search term or time range found)")}
cat(" in", format((Sys.time()-start.time), digits = 2, nsmall = 2))
if(report){
renamed$status[x$status==0] <- "not renamed"
renamed$status[x$status==1] <- "not renamed"
renamed$status[x$status==2] <- "renamed"
renamed}
}
x<-list.files(path = "F:/Dropbox/Apparent news download/Source files", pattern = ".txt",
full.names = TRUE, recursive = TRUE, ignore.case = TRUE)
x <- rename_LNfiles("F:/Dropbox/Alex oOo Johannes/Database 2001 - Copy/", recursive = TRUE, report = TRUE)
rename_LNfiles <- function(x, encoding = "UTF-8", recursive = TRUE, report = FALSE, verbose = TRUE){
###' Track the time
if(verbose){start.time <- Sys.time(); cat("Checking LN files...\n")}
if(all(grepl(".txt$", x, ignore.case = TRUE))){files <- x}#all instances of x are txt files
if(all(grepl("/$", x, ignore.case = TRUE))){# x is a path
files <- list.files(path = x,
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive)
}
if(mean(grepl(".txt$", x, ignore.case = TRUE)) > 0 &
mean(grepl("/$", x, ignore.case = TRUE)) > 0){ # some txt files but also at least one path
files <- x[grepl(".txt$", x, ignore.case = TRUE)]
files <- c(files,
list.files(path = x[!grepl(".txt$", x, ignore.case = TRUE)],
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive))
}
files <- unique(files) # remove duplicated file names
if(verbose){start.time <- Sys.time(); cat(length(files),"files found to process...\n")}
# start renaming files
for(i in 1:length(files)){
#read in the articles
content.v <- stringi::stri_read_lines(files[i], encoding = encoding)
#look for the range of articles
range.v <- content.v[grep("^Download Request:|^Ausgabeauftrag: Dokument", content.v)]
# extract the actual range infromation from line
range.v <- stringi::stri_extract_all_regex(range.v, pattern = "[[:digit:]]|-", simplify = TRUE)
range.v <- stringi::stri_join(range.v, sep = "", collapse = "")
# look for search term
term.v <- content.v[grep("^Terms: |^Begriffe: ", content.v)]
#erase everything in the line exept the actual range
term.v <- gsub("^Terms: |^Begriffe: ", "", term.v)
term.v <- unlist(strsplit(term.v, split = " and | OR ", fixed = FALSE)) #splits term into elemets seprated by and or OR
date.v <- gsub("[^[:digit:]]", "", term.v[1]) # create from start date with everything but numbers (first element is start date)
date.v <- paste0(date.v, "-", gsub("[^[:digit:]]", "", term.v[2]))
term.v <-  gsub("[^[:alpha:]]", "",term.v[3]) #extract first search term
file.name <- sub("[^/]+$","",files[i]) #take old filepath
file.name <- paste0(file.name, term.v, "_", date.v, "_",range.v,".txt")
if(!exists("renamed")){renamed = data.frame(name.orig = files,
name.new = character(length = length(files)),
status = character(length = length(files)),
stringsAsFactors = FALSE)}
#rename file
if(file.exists(file.name)){ #file already exists
renamed$name.new[i] <- renamed$name.orig[i]
renamed$status[i] <- 0
}else{
if(file.name=="__.txt"){ #file name is empty
renamed$name.new[i] <- file.name
renamed$status[i] <- 1
}else{
renamed$name.new[i] <- file.name
renamed$status[i] <- 2
file.rename(files[i], file.name) #rename
}
}
cat("\r\t...renaming files", scales::percent(i/length(files)), "\t\t")
#1. renamed #, 2. not renamed (does already exist), 3. not renamed (no search term or time range found)
}
cat("\n", length(which(renamed$status == 2)), "files renamed, ")
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 0)), " not renamed (file already exists)")}
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 1)), " not renamed (no search term or time range found)")}
cat(" in", format((Sys.time()-start.time), digits = 2, nsmall = 2))
if(report){
renamed$status[renamed$status==0] <- "not renamed"
renamed$status[renamed$status==1] <- "not renamed"
renamed$status[renamed$status==2] <- "renamed"
renamed}
}
x <- rename_LNfiles("F:/Dropbox/Alex oOo Johannes/Database 2001 - Copy/", recursive = TRUE, report = TRUE)
rename_LNfiles <- function(x, encoding = "UTF-8", recursive = TRUE, report = FALSE, verbose = TRUE){
###' Track the time
if(verbose){start.time <- Sys.time(); cat("Checking LN files...\n")}
if(all(grepl(".txt$", x, ignore.case = TRUE))){files <- x}#all instances of x are txt files
if(all(grepl("/$", x, ignore.case = TRUE))){# x is a path
files <- list.files(path = x,
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive)
}
if(mean(grepl(".txt$", x, ignore.case = TRUE)) > 0 &
mean(grepl("/$", x, ignore.case = TRUE)) > 0){ # some txt files but also at least one path
files <- x[grepl(".txt$", x, ignore.case = TRUE)]
files <- c(files,
list.files(path = x[!grepl(".txt$", x, ignore.case = TRUE)],
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive))
}
files <- unique(files) # remove duplicated file names
if(verbose){start.time <- Sys.time(); cat(length(files),"files found to process...\n")}
# start renaming files
for(i in 1:length(files)){
#read in the articles
content.v <- stringi::stri_read_lines(files[i], encoding = encoding)
#look for the range of articles
range.v <- content.v[grep("^Download Request:|^Ausgabeauftrag: Dokument", content.v)]
# extract the actual range infromation from line
range.v <- stringi::stri_extract_all_regex(range.v, pattern = "[[:digit:]]|-", simplify = TRUE)
range.v <- stringi::stri_join(range.v, sep = "", collapse = "")
# look for search term
term.v <- content.v[grep("^Terms: |^Begriffe: ", content.v)]
#erase everything in the line exept the actual range
term.v <- gsub("^Terms: |^Begriffe: ", "", term.v)
term.v <- unlist(strsplit(term.v, split = " and | OR ", fixed = FALSE)) #splits term into elemets seprated by and or OR
date.v <- gsub("[^[:digit:]]", "", term.v[1]) # create from start date with everything but numbers (first element is start date)
date.v <- paste0(date.v, "-", gsub("[^[:digit:]]", "", term.v[2]))
term.v <-  gsub("[^[:alpha:]]", "",term.v[3]) #extract first search term
file.name <- sub("[^/]+$","",files[i]) #take old filepath
file.name <- paste0(file.name, term.v, "_", date.v, "_",range.v,".txt")
if(!exists("renamed")){renamed = data.frame(name.orig = files,
name.new = character(length = length(files)),
status = character(length = length(files)),
stringsAsFactors = FALSE)}
#rename file
if(file.exists(file.name)){ #file already exists
renamed$name.new[i] <- renamed$name.orig[i]
renamed$status[i] <- 0
}else{
if(file.name=="__.txt"){ #file name is empty
renamed$name.new[i] <- file.name
renamed$status[i] <- 1
}else{
renamed$name.new[i] <- file.name
renamed$status[i] <- 2
file.rename(files[i], file.name) #rename
}
}
cat("\r\t...renaming files", scales::percent(i/length(files)), "\t\t")
#1. renamed #, 2. not renamed (does already exist), 3. not renamed (no search term or time range found)
}
cat("\n", length(which(renamed$status == 2)), "files renamed,")
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 0)), " not renamed (file already exists),")}
if(length(which(renamed$status == 1)) > 0){cat(length(which(renamed$status == 1)), " not renamed (no search term or time range found),")}
cat(" in", format((Sys.time()-start.time), digits = 2, nsmall = 2))
if(report){
renamed$status[renamed$status==0] <- "not renamed"
renamed$status[renamed$status==1] <- "not renamed"
renamed$status[renamed$status==2] <- "renamed"
renamed}
}
x <- rename_LNfiles("F:/Dropbox/Alex oOo Johannes/Database 2001 - Copy/", recursive = TRUE, report = TRUE)
rename_LNfiles <- function(x, encoding = "UTF-8", recursive = TRUE, report = FALSE, verbose = TRUE){
###' Track the time
if(verbose){start.time <- Sys.time(); cat("Checking LN files...\n")}
if(all(grepl(".txt$", x, ignore.case = TRUE))){files <- x}#all instances of x are txt files
if(all(grepl("/$", x, ignore.case = TRUE))){# x is a path
files <- list.files(path = x,
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive)
}
if(mean(grepl(".txt$", x, ignore.case = TRUE)) > 0 &
mean(grepl("/$", x, ignore.case = TRUE)) > 0){ # some txt files but also at least one path
files <- x[grepl(".txt$", x, ignore.case = TRUE)]
files <- c(files,
list.files(path = x[!grepl(".txt$", x, ignore.case = TRUE)],
pattern = ".txt$", ignore.case = TRUE, full.names = TRUE,
recursive = recursive))
}
files <- unique(files) # remove duplicated file names
if(verbose){start.time <- Sys.time(); cat(length(files),"files found to process...\n")}
# start renaming files
for(i in 1:length(files)){
#read in the articles
content.v <- stringi::stri_read_lines(files[i], encoding = encoding)
#look for the range of articles
range.v <- content.v[grep("^Download Request:|^Ausgabeauftrag: Dokument", content.v)]
# extract the actual range infromation from line
range.v <- stringi::stri_extract_all_regex(range.v, pattern = "[[:digit:]]|-", simplify = TRUE)
range.v <- stringi::stri_join(range.v, sep = "", collapse = "")
# look for search term
term.v <- content.v[grep("^Terms: |^Begriffe: ", content.v)]
#erase everything in the line exept the actual range
term.v <- gsub("^Terms: |^Begriffe: ", "", term.v)
term.v <- unlist(strsplit(term.v, split = " and | OR ", fixed = FALSE)) #splits term into elemets seprated by and or OR
date.v <- gsub("[^[:digit:]]", "", term.v[1]) # create from start date with everything but numbers (first element is start date)
date.v <- paste0(date.v, "-", gsub("[^[:digit:]]", "", term.v[2]))
term.v <-  gsub("[^[:alpha:]]", "",term.v[3]) #extract first search term
file.name <- sub("[^/]+$","",files[i]) #take old filepath
file.name <- paste0(file.name, term.v, "_", date.v, "_",range.v,".txt")
if(!exists("renamed")){renamed = data.frame(name.orig = files,
name.new = character(length = length(files)),
status = character(length = length(files)),
stringsAsFactors = FALSE)}
#rename file
if(file.exists(file.name)){ #file already exists
renamed$name.new[i] <- renamed$name.orig[i]
renamed$status[i] <- 0
}else{
if(file.name=="__.txt"){ #file name is empty
renamed$name.new[i] <- file.name
renamed$status[i] <- 1
}else{
renamed$name.new[i] <- file.name
renamed$status[i] <- 2
file.rename(files[i], file.name) #rename
}
}
cat("\r\t...renaming files", scales::percent(i/length(files)), "\t\t")
#1. renamed #, 2. not renamed (does already exist), 3. not renamed (no search term or time range found)
}
cat("\n", length(which(renamed$status == 2)), "files renamed, ")
if(length(which(renamed$status == 0)) > 0){cat(length(which(renamed$status == 0)), "not renamed (file already exists), ")}
if(length(which(renamed$status == 1)) > 0){cat(length(which(renamed$status == 1)), "not renamed (no search term or time range found), ")}
cat(" in", format((Sys.time()-start.time), digits = 2, nsmall = 2))
if(report){
renamed$status[renamed$status==0] <- "not renamed"
renamed$status[renamed$status==1] <- "not renamed"
renamed$status[renamed$status==2] <- "renamed"
renamed}
}
x <- rename_LNfiles("F:/Dropbox/Alex oOo Johannes/Database 2001 - Copy/", recursive = TRUE, report = TRUE)
library("devtools")
library("roxygen2")
setwd("C:/Users/binis/Documents/GitHub/LexisNexisTools")
roxygenise(clean = TRUE)
